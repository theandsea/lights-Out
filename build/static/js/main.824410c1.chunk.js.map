{"version":3,"sources":["index.js"],"names":["Square","props","className","cls","onClick","color","value","Board","i","classname","this","squares","key","size","board","row","j","push","renderSquare","React","Component","Game","state","history","Array","originsize","fill","spot","stepNumber","xIsNext","descending","solution","show_ans","text","handleChange","bind","validtext","parseInt","l","w","Math","floor","random","k","flip","setState","slice","current","length","currsolu","ifwin","concat","step","descend","event","target","status","winner","moves","map","move","desc","jumpTo","reverse","answer","type","pattern","onChange","handleClick","componentDidMount","win","list","sqrt","x","y","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.824410c1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nfunction Square(props) {\n  return (\n    <button className={props.cls}\n      onClick={props.onClick}\n      color=\"Red\">\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const classname=this.props.cls? this.props.cls :\"square\";\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        key={i}\n        cls={classname}\n      />\n    );\n  }\n\n\n  render() {\n    const size=this.props.size;\n    let board=[];\n    for (let i=0; i<size; i++){\n        var row=[];\n        for(let j=0;j<size; j++)\n        {\n           row.push(this.renderSquare(i*size+j))\n        }\n        board.push(<div className=\"board-row\" key={i}>{row}</div>);\n     }\n    return (\n      <div>\n        {board}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    const originsize=4;\n    this.state = {\n      history: [\n        {\n          squares: Array(originsize*originsize).fill(null),\n          spot: null\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      descending: false,\n      size: originsize,\n      solution:[Array(originsize*originsize).fill(null)],\n      show_ans: false,\n      text: '4'\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    var validtext=4;\n    if (this.state.text){\n      const value=parseInt(this.state.text, 10);\n      validtext=value;\n      if (value > 24)\n        validtext=24;\n      if (value < 4)\n        validtext=4;\n    }\n\n    const size=validtext ;//parseInt(this.state.text, 10);\n    // const size=this.state.size;\n    const l= size*size;\n    const w=Math.floor(Math.random() * l)+1;\n    const squares=Array(l).fill(null);\n    const solution=Array(l).fill(1);\n    for (let i=0; i<w; i++){\n      let k=Math.floor(Math.random() * l);\n      flip(k,squares);\n      solution[k]++;\n    }\n    for(let i=0;i<l;i++)\n      solution[i]=solution[i]%2 ? null:\"X\";\n\n    this.setState({\n      history:[\n        {\n          squares: squares,\n          spot: null\n        }\n      ],\n      stepNumber: 0,\n      solution:[solution],\n      size:size,\n      text:validtext\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const solution = this.state.solution.slice(0, this.state.stepNumber + 1);\n    const currsolu = solution[history.length - 1].slice(); // slice to get a copy\n    // flip\n    const squares = current.squares.slice();\n    if (ifwin(squares)){\n      return;\n    }else{\n      flip(i,squares);\n      currsolu[i]=currsolu[i]? null:\"X\";\n    }\n    solution.push(currsolu);\n\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          spot: i\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      solution: solution\n    });\n  }\n\n  jumpTo(step) {\n    const history = this.state.history.slice(0, step + 1);\n    const solution = this.state.solution.slice(0,step + 1);\n    this.setState({\n      history: history,\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  reverse(){\n    const descend=this.state.descending\n    this.setState({\n      descending: !descend\n    })\n  }\n\n  handleChange(event){\n    this.setState({text:event.target.value});\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const currsolu = this.state.solution[this.state.stepNumber];\n    const winner = ifwin(current.squares);\n    const n=history.length;\n    const size=this.state.size;\n\n    var moves = history.map((step, move) => {\n      const spot = step.spot;\n      //const moveprime =  this.state.descending ? n-1-move : move ;\n      const desc = move ?\n        'Go to move #' + move +\"( \"+(spot%size)+\" , \"+Math.floor(spot/size)+\" )\":\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n    if (this.state.descending)\n      moves.reverse();\n\n    let status;\n    if (winner) {\n      status = \"You win !!üëç try to increase difficulty\";\n    } else{\n      status = \"continue...\";\n    }\n\n    const answer=<Board\n              squares={currsolu}\n              size={this.state.size}\n              onClick={()=>1}\n              cls=\"square3\"\n            />\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          difficulty(4-24):<input type='text' className=\"text\" pattern=\"[0-9]*\" value={this.state.text} onChange={this.handleChange}/>\n          <Board\n            squares={current.squares}\n            size={this.state.size}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <button onClick={() => this.componentDidMount()}> reset </button>\n          <input type=\"checkbox\"\n            onClick={() => this.reverse()}/>\n            descending\n          <div>{status}</div>\n          <div className=\"game-board\">\n            <button onClick={() => this.setState({show_ans: !this.state.show_ans})}> answer </button>\n            {this.state.show_ans? answer:<div/>}\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction ifwin(squares) {\n  let win=true;\n  for(let i=0,l=squares.length;i<l;i++)\n    if (squares[i]){\n      win=false;\n      break;\n    }\n  return win;\n}\n\nfunction flip(i,squares){\n    // flip the light\n    const list=[i];\n    const size=Math.sqrt(squares.length);\n    const x=Math.floor(i/size);\n    const y=i % size;\n    if (x-1>=0)\n      list.push(i-size);\n    if (x+1<size)\n      list.push(i+size);\n    if (y-1>=0)\n      list.push(i-1);\n    if (y+1<size)\n      list.push(i+1);\n    for(let k of list)\n      squares[k] = squares[k] ? null:\"X\";\n    return squares;\n}\n"],"sourceRoot":""}